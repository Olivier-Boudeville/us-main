name: US-Main CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  build:
    # Relying on a standard GitHub-hosted runner, see
    # https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#standard-github-hosted-runners-for-public-repositories
    #
    # The actual OS is dictated by the image, which is currently reported as a
    # Debian distribution (currently: bookworm).
    #
    runs-on: ubuntu-latest

    # See https://hub.docker.com/_/erlang:
    container:
      image: erlang:latest

    steps:
    - uses: actions/checkout@v2
    - name: Compile
      run: |
        echo "Checking distribution and version"
        cat /etc/*-release
        # Actually does not look as an Ubuntu but as a Debian:
        #echo "## Listing repositories: $(cat /etc/apt/sources.list)"
        #echo "## Updating packages (1/2)"
        #apt-get update
        #echo "## Installing add-apt-repository"
        #apt-get install --assume-yes software-properties-common
        #echo "## Adding universe"
        #add-apt-repository universe
        #echo "## Updating packages (2/2)"
        #apt-get update
        echo "deb http://deb.debian.org/debian bookworm-backports main" >> /etc/apt/sources.list
        echo "## Updating packages"
        apt-get update
        apt-get install --assume-yes sudo tree pkg-config libgammu-dev lm-sensors
        apt-get -t bookworm-backports install --assume-yes libgammu-dev
        echo " - building from: $(pwd)"
        echo " - content of parent directory: $(ls .. 2>/dev/null | tr '\n' ' ')"
        base_dir="$(pwd)"
        echo "Base directory is: '${base_dir}'."
        # Configuration needed for post-install permission fixes:
        cfg_dir="${HOME}/.config/universal-server/"
        echo "Configuration directory is: '${cfg_dir}'."
        us_common_base_dir="${base_dir}/_build/default/lib/us_common"
        mkdir -p "${cfg_dir}"
        cd "${cfg_dir}"
        ln -s "${us_common_base_dir}/priv/for-testing/us.config"
        ln -s "${base_dir}/priv/for-testing/us-main-for-tests.config"
        cd "${base_dir}"
        # Way too much troubles with: 'rebar3 compile' (faulty attempts to
        # look-up/rebuild sources of already-built layers), so we use our own
        # deployment script:
        #
        priv/bin/deploy-us-main-native-build.sh --no-launch --allow-root-exec
        #echo " - content of _checkouts directory: $(ls _checkouts 2>/dev/null)"
        #echo " - content of _build/default/lib directory: $(ls _build/default/lib 2>/dev/null)"
        make info-context
    - name: Run tests
      run: |
        # Needed so that Gammu can emulate a 3G device there:
        mkdir /tmp/gammu-dummy-device
        cd ${base_dir}
        # Corresponding configuration information:
        /bin/cp -f _build/default/lib/mobile/conf/gammurc-for-tests $HOME/.gammurc
        # To avoid 'No sensors found!' to be returned by 'sensors', yet
        # bound to fail with 'No i2c device files found.', typically in a
        # continuous integration context:
        sensors-detect --auto || true
        make test NODE_NAMING="--sn"
