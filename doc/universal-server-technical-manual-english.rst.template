.. _Top:


.. title:: Welcome to the Universal Server documentation

.. comment stylesheet specified through GNUmakefile



============================================
Technical Manual of the ``Universal Server``
============================================


.. role:: raw-html(raw)
   :format: html

.. role:: raw-latex(raw)
   :format: latex


:raw-html:`<a name="universal-server_top"></a>`

:raw-html:`<div class="banner"><p><em>Universal Server documentation</em> <a href="http://us-main.esperide.org">browse latest</a> <a href="https://olivier-boudeville.github.io/us-main/index.html">browse mirror</a> <a href="universal-server-technical-manual-english.pdf">get PDF</a> <a href="#universal-server_top">go to top</a> <a href="#us-main_toc">go to toc</a> <a href="#universal-server_bottom">go to bottom</a> <a href="api-doc/index.html">browse API</a> <a href="https://github.com/Olivier-Boudeville/us-main">go to project</a><a href="mailto:about(dash)universal-server(at)esperide(dot)com?subject=[Universal%20Server]%20Remark">email us</a></p></div>`



:raw-html:`<center><img src="us-main-title.png" id="responsive-image-medium"></img>`
:raw-latex:`\begin{center} \includegraphics[scale=1.2]{us-main-title.png} \end{center}`



:Organisation: Copyright (C) 2019-GENERATION_YEAR_TAG Olivier Boudeville
:Contact: about (dash) universal-server (at) esperide (dot) com
:Creation date: Saturday, May 2, 2020
:Lastly updated: GENERATION_DATE_TAG
:Version: PROJECT_VERSION_TAG
:Status: In progress
:Dedication: Users and maintainers of the ``Universal Server``.
:Abstract:

	The `Universal Server <http://us-main.esperide.org/>`_, part of the umbrella project `of the same name <https://github.com/Olivier-Boudeville/Universal-Server>`_, is a multi-service daemon in charge of the automation (monitoring, scheduling and performing) of various computer-based tasks, such as the proper management of the server itself or, in the future, of house automation.

	We present here a short overview of these services, to introduce them to newcomers.

.. comment The next level of information is to read the corresponding `source files <https://github.com/Olivier-Boudeville/us-main>`_, which are intensely commented and generally straightforward.


.. meta::
   :keywords: Universal Server

:raw-html:`</center>`


:raw-latex:`\pagebreak`

:raw-html:`<a name="us-main_toc"></a>`

.. _`table of contents`:

.. contents:: **Table of Contents**
	:depth: 3


:raw-latex:`\pagebreak`

--------
Overview
--------

We present here a short overview of the general automated services offered by our so-called "Universal Server", to introduce them to newcomers. These services are implemented by `US-Main <https://github.com/Olivier-Boudeville/us-main>`_, which relies notably on `US-Common <https://github.com/Olivier-Boudeville/us-common>`_.

The next level of information is to read the corresponding `source files <https://github.com/Olivier-Boudeville/us-main/tree/master/src>`_, which are intensely commented and generally straightforward.

The project repository is located `here <https://github.com/Olivier-Boudeville/us-main>`_.


-----------
Layer Stack
-----------

From the highest level to the lowest, as summarised `here <https://github.com/Olivier-Boudeville/us-main>`_, a software stack involving the Universal Server usually is like:

- the *Universal Server* services themselves (i.e. this `US-Main <http://us.esperide.org/>`_ layer)
- [optional] the *Universal Webserver*, i.e. `US-Web <http://us-web.esperide.org/>`_ (for web interaction)
- `US-Common <http://us-common.esperide.org/>`_ (for US base facilities)
- [optional] `Ceylan-Mobile <http://mobile.esperide.org>`_ (for 3G connectivity, notably SMS sending, relying on the Gammu library)
- [optional] `Ceylan-Seaplus <http://seaplus.esperide.org>`_ (prerequisite of Ceylan-Mobile, for a bridge from Erlang to the C language)
- `Ceylan-Oceanic <http://oceanic.esperide.org>`_ (for the support of home automation, through the integration of Enocean devices and actuators; relies on `our fork of erlang-serial <https://github.com/Olivier-Boudeville/erlang-serial>`_)
- `Ceylan-Traces <http://traces.esperide.org>`_ (for advanced runtime traces)
- `Ceylan-WOOPER <http://wooper.esperide.org>`_ (for OOP)
- `Ceylan-Myriad <http://myriad.esperide.org>`_ (as an Erlang toolbox)
- `Erlang <http://erlang.org>`_ (for the compiler and runtime)
- `GNU/Linux <https://en.wikipedia.org/wiki/Linux>`_

The shorthand for ``Universal Server`` is ``us``.

:raw-latex:`\pagebreak`





-----------------------------------------
Facilities Provided by this US-Main Layer
-----------------------------------------

These are mainly administration services.


House Automation
================

This is done thanks to the `Ceylan-Oceanic <http://oceanic.esperide.org>`_ library.


Monitoring of Host Sensors
==========================

The objective here is to track the various (and numerous) sensors of interest that most modern computers include; should abnormal feedback be detected, it is to be automatically reported thanks to the `communication gateway`_ service.

The `US Sensor Manager <https://github.com/Olivier-Boudeville/us-main/blob/master/src/class_USSensorManager.erl>`_ tracks automatically many **hardware sensors**; at start-up it detects the main available ones, regarding:

- **temperatures** at various locations: the CPU socket, the CPU package and cores themselves, any APU, the motherboard, the chipset, ACPI, some disks (ex: NVME); in the future, adding GPU and RAM modules is considered
- the **speed of the fans** known of the motherboard (as opposed to any case fan that would be directly connected to the power supply and that would remain invisible)
- **chassis intrusion**, should such sensors be available

(other sensors like batteries, network or USB interfaces, etc. are at least currently ignored, as their measurements are mostly voltage levels)

From then, the sensor manager periodically monitors the various measurement points exhibited by such sensors: it does its best to filter bogus values, to detect abnormal changes and to report to the user any related issue.



Preparing the Setup
-------------------

The monitoring done by this server relies on the ``sensors`` executable
(typically ``/usr/bin/sensors``, obtained generally from a package of the same
name and relying on `lm-sensors
<https://github.com/lm-sensors/lm-sensors>`_). One may install the ``i2c-tools``
package as well for DIMM information (see R2 below).

The ``sensors-detect`` script must have been run once by root beforehand (select then only the default, safer options, by hitting Enter repeatedly or simply use its ``--auto`` option), in order to configure sensors.

Sensor configuration is typically stored in ``/etc/sensors3.conf``, and must exist prior to running the US-Main server.



Mode of Operation of the Sensor Manager
---------------------------------------

Once the sensor manager is started, **temperatures** are periodically tracked (i.e. the currently reported one, plus minimum, maximum, and average since start) and compared to thresholds (any critical temperature as reported by the chips, and also ones set by our sensor manager itself in order to trigger alarms).

Abnormal temperatures (that is, going above - or even below - relevant thresholds) are then automatically timestamped and reported to the user by the US logic (i.e. notified in traces with appropriate severity, and possibly sent to the user thanks to emails and/or SMS, see the `communication gateway`_ service).

Similarly, any **fan** that would stop whereas not being PWM [#]_  is reported, and the same applies should an **intrusion** happen.

.. [#] PWM stands for `Pulse-width modulation <https://en.wikipedia.org/wiki/Pulse-width_modulation>`_; the speed of these fans can be controlled by their power source (typically the motherboard).


Many sensors report bogus values; the US Sensor Manager does its best to filter them out appropriately. This includes temperatures outside of any realistic ranges and an intrusion being reported right from US-Main startup (whereas, supposedly, it had not happened already).



Temperature monitoring
......................

Temperatures are monitored based on all the sensors that are supported by ``lm-sensors`` (notably the motherboard and CPU ones). Many sensors report, even when they are correctly tuned, bogus values, and are more like very poor random generators (see how to mute_ them).

The sensor manager considers that, when it starts, most temperatures are under control. So it will consider that any too low or too high temperature reported is bogus (refer to the ``{low,high}_bogus_temperature_threshold`` defines).

In the future, extra information sources could be used:

- Hard Disk Drives, thanks to hddtemp, libatasmart, udisks2 or smartmontools
- DIMM Temperature sensors (see R2)
- GPU, thanks to XNVCtrl for NVidia ones, or ADL SDK for ATI ones

Refer to R5 for further details.

Note that `Platform Controller Hub <https://en.wikipedia.org/wiki/Platform_Controller_Hub>`_ (ex: ``pch_cannonlake-virtual-*``, ``pch_skylake-virtual-*``, etc. ) are Intel's single-chip chipsets; they tend to run hotter than CPUs.

They may be reported as autonomous first-level entries, or as measurement points of the motherboard.



Fan Control
...........

The rotation speed of the fans can be measured thanks to ``lm-sensors`` as well.

Note that not all fans are known of the motherboard, notably the ones that are directly controlled by the user through a button (ex: stop/low/high) will remain invisible to all programs.

Currently the sensor manager is not able to discriminate between fixed-speed fans and PWM ones.

The ``pulses`` attribute (ex: ``fan2_pulses``) tells how many of such pulses are generated per revolution of the fan.



Chassis Intrusion
.................

In this last case, prior to launching the US server, one may try to reset them; for example, as root:

.. code:: bash

 $ ls -l /sys/class/hwmon/hwmon*/intrusion*
 -rw-r--r-- 1 root root 4096 Jul 11 19:30 /sys/class/hwmon/hwmon3/intrusion0_alarm
 -rw-r--r-- 1 root root 4096 Jul  8 21:46 /sys/class/hwmon/hwmon3/intrusion0_beep
 -rw-r--r-- 1 root root 4096 Jul 11 19:30 /sys/class/hwmon/hwmon3/intrusion1_alarm
 -rw-r--r-- 1 root root 4096 Jul  8 21:46 /sys/class/hwmon/hwmon3/intrusion1_beep
 $ echo 0 >| /sys/class/hwmon/hwmon3/intrusion1_alarm
 $ cat /sys/class/hwmon/hwmon3/intrusion1_alarm
 1

As shown, this may not succeed.



.. _mute:

Muting Faulty Sensors
.....................

Some sensors are hopelessly flawed and are bound to raise false alarms at any time.

Once they triggered a sufficient number of them, the safest route is to mute them, which can be done thanks to the ``us_sensor_monitoring`` entry of the `US-Main configuration file`_.

Let's suppose that a sensor whose identifier is ``{_SensorType=nct6792, _SensorInterface=isa, _SensorNumber="0a20"}`` shall have its measurement point ``AUXTIN1`` be muted, and that one wants to disable another one, ``{acpitz, acpi, "0"}``, as a whole (i.e. all its measurement points).

It can be done with the following configuration entry:

.. code:: erlang

 {sensor_monitoring, [

	% Here shall be specified a list of
	% {sensor_id(), 'all_points' | [ measurement_point_name() ]} pairs
	% in order to mute bogus sensors / measurement points:
	%
	{muted_measurement_points, [
		{{nct6792, isa, "0a20"}, ["AUXTIN1"]},
		{{acpitz, acpi, "0"}, all_points}
							   ]}
						]}.






Other Related Technical Information
...................................

To access information regarding a given sensor, ``psensor`` may be used: open the preferences of the sensor (click on its name in the main window), and select the menu item *Preferences*, and look at the *Chip* field. See `this link <https://wpitchoune.net/psensor/faq.html>`_ for more information.

The ``sensors`` tool is reporting values found in the Linux virtual file system directory, in ``/sys/class/thermal/thermal_zone*/{temp,type}`` for temperatures.

Examples:

- ``Package id 0`` is your (first) CPU

- ``dell_smm-virtual-0`` is your CPU fan, managed by your system firmware

- ``acpitz-virtual-0`` (*ACPI Thermal Zone*) is the temperature sensor near/on your CPU socket; this sensor can be unreliable

- ``coretemp-isa-0000`` measures the temperature of the specific cores


.. For thermal information, one can also execute::

 $ paste <(cat /sys/class/thermal/thermal_zone*/type) <(cat /sys/class/thermal/thermal_zone*/temp) | column -s $'\t' -t | sed 's/...$/.0°C/'
 acpitz        27.0°C
 acpitz        29.0°C
 x86_pkg_temp  49.0°C

See the many comments in `class_USSensorManager.erl <https://github.com/Olivier-Boudeville/us-main/blob/master/src/class_USSensorManager.erl>`_ for more details.

See also the following resources:

- `R1 <https://askubuntu.com/questions/843231/what-is-the-meaning-of-the-output-of-the-command-sensors>`_: interpreting the output of ``sensors``
- `R2 <https://wiki.archlinux.org/title/lm_sensors>`_: the ``lm_sensors`` documentation of Arch Linux
- `R3 <https://www.linux.com/topic/desktop/advanced-lm-sensors-tips-and-tricks-linux-0/>`_ and `R4 <https://www.linux.com/training-tutorials/jazz-lm-sensors-graphics-and-notifications-0/>`_: ``lm-sensors`` tips and tricks
- `R5 <https://wpitchoune.net/psensor/>`_: information about ``psensor``
- `R6 <https://blog.hqcodeshop.fi/archives/276-Improving-Nuvoton-NCT6776-lm_sensors-output.html>`_: an example of preparation/tuning of one's sensors



.. _`contact directory`:

Contact Directory
=================

The US Contact Directory server allows US-Main to track information regarding US contacts, for various purposes, including for the US `communication gateway`_.


Contact File Format
-------------------

Contact files are `ETF files <https://myriad.esperide.org/#etf>`_ that contain a range of information about persons and organisations of interest.

Each non-commented line of these files shall be of the following format:

.. code:: erlang

 -type contact_line() :: { UserId :: user_id(),
	FirstName :: ustring(), LastName :: ustring(), NickName :: ustring(),
	Comment :: ustring(), BirthDate :: maybe( ustring() ),
	LandlineNumber :: maybe( ustring() ), MobileNumber :: maybe( ustring() ),
	PrimaryEmailAddress :: maybe( ustring() ),
	SecondaryEmailAddress :: maybe( ustring() ),
	PostalAddress :: maybe( ustring() ),
	Roles :: [ role() ] }.


A typical contact line could then be:

.. code:: erlang

 { 1, "James", "Bond", "007", "MI6 Agent 007", {17,5,1971},
  "+44 9 81 47 25 40", "+44 6 26 83 37 22", "james.bond@mi6.uk.org",
  undefined, undefined, [administrator, secret_agent] }.


See also our `test contact ETF file <https://github.com/Olivier-Boudeville/us-main/blob/master/test/test_contact_directory.etf>`_ as a full example thereof.



Contact File Location
---------------------

The path to a contact file can be either specified as an absolute one, or as a relative one - in which case it will be deemed relative to the US configuration directory.

They may be mere symlinks pointing to contact files kept in VCS in other locations.



.. _`communication gateway`:

Communication Gateway
=====================

The purpose of the US Communication Gateway is to enable (possibly two-way) exchanges with the US users.

Such communication is not to happen frow a web-based medium (see `US-Web <http://us-web.esperide.org>`_ for that), but through alternate modes such as SMS (relying then on `Ceylan-Mobile <http://mobile.esperide.org>`_) and/or e-mails (relying then on `the corresponding services of Ceylan-Myriad <https://github.com/Olivier-Boudeville/Ceylan-Myriad/blob/master/src/utils/email_utils.erl>`_).

For that, the correspondance between a US role (ex: ``administrator``) and actual user information is established thanks to the `contact directory`_ service.




.. _`network infrastructure tracker`:

Network Support Monitoring
==========================

This service allows to ensure that the local host (on which US-Main is running) enjoys a functional **network support**, in terms of:

- ICMP probes (ping)
- Internet (IP) connectivity
- DNS resolution

This is checked by ensuring periodically that a set of target hosts, specified as direct IP addresses and/or DNS names, can indeed be interacted with through the network.

Of course any issue (typically outage of a given network service) is then reported by appropriate means (i.e. by SMS rather than by email then).



.. _`monitoring of online services`:

Remote Monitoring of Online Services
====================================

The purpose here is to monitor online services (typically websites) provided by networked peers.

Each service is tracked based on a set of information:

- protocol: ``http``, ``https``, maybe in the future ``ftp`` or alike
- base hostname, specified as a DNS name or an IP address
- possibly a resource designator (ex: a specific URL) for the actual checking



Next Services
=============

The following services are planned (some day) for addition:

- UPS (`Uninterruptible Power Supply <https://en.wikipedia.org/wiki/Uninterruptible_power_supply>`_) monitoring, to be notified whenever a related event happens (typically a power failure from the electrical grid)



.. _`configuration`:

.. _`US-Main configuration file`:

-------------------
Configuring US-Main
-------------------

.. Note:: We discuss configuration before installation, as the settings of interest shall be defined prior to deployment, notably so that adequate permissions can be set on the installation, according to the user under which US-Main is intended to run.



The US-Main server is part of our "Universal Server" infrastructure, and as such relies on the `base US-Common configuration settings <https://us-common.esperide.org/#configuration>`_.

So the base information of the user-specified ``us.config`` file, found in the US Configuration directory (possibly located in ``/etc/xdg/universal-server/`` or ``~/.config/universal-server/``), will apply (see `this example thereof <https://github.com/Olivier-Boudeville/us-common/blob/master/priv/for-testing/us.config>`_).

Notably, in this file, a ``us_main_config_filename`` entry can be specified in order to designate the US-Main configuration file that shall be used; for example:

.. code:: erlang

 {us_main_config_filename, "us-main-for-tests.config"}.


This US-Main configuration file concentrates the settings of all the services presented below, and the ones of US-Main itself; it is additionally used by the `US-Main scripts <https://github.com/Olivier-Boudeville/us-main/tree/master/priv/bin>`_, notably in order to start, stop, or monitor a designated US-Main server.


For operational use, we recommend to create a US-Main specific user (to be set in the ``us_username`` entry of one's ``us.config`` file), in order to compartmentalise the accesses to resources.



.. _`installation`:

-----------------------------------------------------
Installing US-Main: Current Stable Version & Download
-----------------------------------------------------

As mentioned, the single mandatory prerequisite of the `Universal Server <https://github.com/Olivier-Boudeville/Universal Server>`_ is `US-Common <http://us-common.esperide.org/>`_, which relies on `Ceylan-Traces <https://github.com/Olivier-Boudeville/Ceylan-Traces>`_, which implies in turn `Ceylan-WOOPER <https://github.com/Olivier-Boudeville/Ceylan-WOOPER>`_, then `Ceylan-Myriad <https://github.com/Olivier-Boudeville/Ceylan-Myriad>`_ and `Erlang <http://erlang.org>`_.

We prefer using GNU/Linux, sticking to the latest stable release of Erlang (refer to the corresponding `Myriad prerequisite section <http://myriad.esperide.org#prerequisites>`_  for more precise guidelines), and building the Universal Server from sources, thanks to GNU ``make``.

The Universal Server ``master`` branch is meant to stick to the latest stable version: we try to ensure that this main line always stays functional (sorry for the pun). Evolutions are to take place in feature branches and to be merged only when ready.



Automated Installation & Deployment
===================================

This is actually the simplest, safest, most used/recommended procedure: just run the `deploy-us-main-native-build.sh <https://github.com/Olivier-Boudeville/us-main/blob/master/priv/bin/deploy-us-main-native-build.sh>`_ script (possibly with its ``--no-launch`` option if wanting just to have it ready) and hope for the best!



Using Cutting-Edge GIT
======================

This is more or less a manual, more limited version of the previous deployment script.

Once Erlang is available, it should be just a matter of executing:

.. code:: bash

 $ git clone https://github.com/Olivier-Boudeville/Ceylan-Myriad myriad
 $ cd myriad && make all && cd ..

 $ git clone https://github.com/Olivier-Boudeville/Ceylan-WOOPER wooper
 $ cd wooper && make all && cd ..

 $ git clone https://github.com/Olivier-Boudeville/Ceylan-Traces traces
 $ cd traces && make all && cd ..


 # Possibly:
 $ git clone https://github.com/Olivier-Boudeville/erlang-serial
 $ cd erlang-serial && make && DESTDIR=. make install && cd ..

 $ git clone https://github.com/Olivier-Boudeville/Ceylan-Oceanic oceanic
 $ cd oceanic && make all && cd ..


 # Also possibly:
 $ git clone https://github.com/Olivier-Boudeville/Ceylan-Seaplus seaplus
 $ cd seaplus && make all && cd ..

 $ git clone https://github.com/Olivier-Boudeville/Ceylan-Mobile mobile
 $ cd mobile && make all && cd ..


 $ git clone https://github.com/Olivier-Boudeville/us-common
 $ cd us-common && make all && cd ..

 $ git clone https://github.com/Olivier-Boudeville/us-main
 $ cd us-main && make all && cd ..



.. Running a corresponding test just then boils down to:

.. .. code:: bash

..  $ make debug


.. Should LogMX be installed and available in the PATH, the test may simply become:

.. .. code:: bash

..  $ make class_USScheduler_run



Rebar3-based Build
==================

.. We recommend, for all Erlang-related software, to rely on rebar3.

One may prefer relying on rebar3, even if it is by far the less frequent approach taken here.

If wanting to be able to operate on the source code of the dependencies, appropriate symbolic links may be defined in a ``_checkouts`` directory created at the root of ``us-main``, these links pointing to relevant Git clones (typically sibling ones).



:raw-html:`<a name="otp"></a>`

.. _`otp-build`:

Using OTP-Related Build/Runtime Conventions
===========================================

As discussed in these sections of `Myriad <http://myriad.esperide.org/myriad.html#otp>`_, `WOOPER <http://wooper.esperide.org/index.html#otp>`_, `Traces <http://traces.esperide.org/index.html#otp>`_ and `US-Common <http://us-common.esperide.org/index.html#otp>`_, we added the (optional) possibility of generating a Universal Server *OTP application* out of the build tree, ready to result directly in an *(OTP) release*. For that we rely on `rebar3 <https://www.rebar3.org/>`_, `relx <https://github.com/erlware/relx>`_ and `hex <https://hex.pm/>`_.

Then we benefit from a standalone, complete Universal Server.

.. comment As for Myriad, WOOPER, Traces and US-Common, most versions of the Universal Server are also published as `Hex packages <https://hex.pm/packages/us_main>`_.

For more details, one may have a look at:

- `rebar.config.template <https://github.com/Olivier-Boudeville/us-main/blob/master/conf/rebar.config.template>`_, the general rebar configuration file used when generating the Universal Server OTP application and release (implying the automatic management of Myriad and WOOPER)
- `rebar-for-hex.config.template <https://github.com/Olivier-Boudeville/us-main/blob/master/conf/rebar-for-hex.config.template>`_, to generate a corresponding Hex package for Universal Server (whose structure and conventions is quite different from the previous OTP elements)



.. _`execution`:

-----------------
Launching US-Main
-----------------

We recommend running US-Main thanks to a native build (rather than as a release), and using for that the `start-us-main-native-build.sh <https://github.com/Olivier-Boudeville/us-main/tree/master/priv/bin/start-us-main-native-build.sh>`_ script, either directly (for testing) or through systemd (for actual use).

In this last case, first a symbolic link pointing to this script shall be typically created in the ``/usr/local/bin`` directory of the host of interest. Then the server is to be triggered based on ``/etc/systemd/system/us-main-as-native-build.service`` (see `us-main-as-native-build.service <https://github.com/Olivier-Boudeville/us-main/blob/master/priv/conf/us-main-as-native-build.service>`_).

For example:

.. code:: bash

 $ systemctl start us-main-as-native-build
 $ journalctl --pager-end --unit=us-main-as-native-build.service
 $ systemctl enable us-main-as-native-build

Then one may run ``monitor-us-main.sh`` to browse its traces live at any time.

Like notified in the start-up message::

 -- Starting US-Main natively-built application as user 'stallone' (EPMD port: 4506)...
		Executing application us_main_app.beam as a service (second form)
 Write pipe '/tmp/launch-erl-1103261.w' found, waiting 2 seconds to ensure start-up is successful indeed.

  **************************************************************
  ** Node 'us_main' ready and running as a daemon.
  ** Use 'to_erl /tmp/launch-erl-1103261' to connect to that node.
  ** (then type CTRL-D to exit without killing the node)
  **************************************************************
  (authbind success reported)

one may use ``to_erl`` to connect directly; just remember that exiting the interpreter as usual (CTRL-C twice) thus means *killing* that node; prefer CTRL-D (once).

For further information one may refer to the `US-Main shell scripts <https://github.com/Olivier-Boudeville/us-main/tree/master/priv/bin>`_, which cover various administration-related tasks (deploying, starting, monitoring, stopping an US-Main server).


-------
Support
-------

Bugs, questions, remarks, patches, requests for enhancements, etc. are to be reported to the `project interface <https://github.com/Olivier-Boudeville/us-main>`_ (typically `issues <https://github.com/Olivier-Boudeville/us-main/issues>`_) or directly at the email address mentioned at the beginning of this document.



.. _`free software`:

-------
Licence
-------

The ``Universal Server`` is licensed by its author (Olivier Boudeville) under the `GNU Affero General Public License <https://www.gnu.org/licenses/agpl-3.0.en.html>`_ as published by the Free Software Foundation, either version 3 of this license, or (at your option) any later version.

This allows the use of the Universal Server code in a wide a variety of software projects, while still maintaining copyleft on this code, ensuring improvements are shared.

We hope indeed that enhancements will be back-contributed (ex: thanks to merge requests), so that everyone will be able to benefit from them.



-------------
Please React!
-------------

If you have information more detailed or more recent than those presented in this document, if you noticed errors, neglects or points insufficiently discussed, drop us a line! (for that, follow the Support_ guidelines).



-----------
Ending Word
-----------

Have fun with the Universal Server!

:raw-html:`<center><img src="us-main-title.png" id="responsive-image-small"></img></center>`
:raw-latex:`\begin{figure}[h] \centering \includegraphics[scale=0.7]{us-main-title.png} \end{figure}`

:raw-html:`<a name="universal-server_bottom"></a>`
